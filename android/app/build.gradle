apply plugin: "com.android.application"
apply plugin: 'walle'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId rootProject.ext.app.applicationId
        minSdkVersion 16
        targetSdkVersion 23
        versionCode rootProject.ext.app.versionCode
        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        buildConfigField "String", "CODE_PUSH_KEY", "\"" + rootProject.ext.app.CODE_PUSH_KEY + "\""
        buildConfigField "String", "CODE_PUSH_SERVER_URL", "\"" + rootProject.ext.app.CODE_PUSH_SERVER_URL + "\""
        buildConfigField "String", "UMENG_APPKEY", "\"" + rootProject.ext.app.UMENG_APPKEY + "\""
        buildConfigField "String", "UMENG_MESSAGE_SECRET", "\"" + rootProject.ext.app.UMENG_MESSAGE_SECRET + "\""
        buildConfigField "String", "JPUSH_APPKEY", "\"" + rootProject.ext.app.JPUSH_APPKEY + "\""
        buildConfigField "boolean", "SHELL_IS_REACT_NATIVE", rootProject.ext.localRN.SHELL_IS_REACT_NATIVE
        buildConfigField "boolean", "SHELL_REACT_NATIVE_CODEPUSH", rootProject.ext.localRN.SHELL_REACT_NATIVE_CODEPUSH
        buildConfigField "String", "SHELL_CODE_PUSH_SERVER_URL", "\"" + rootProject.ext.localRN.SHELL_REACT_NATIVE_CODEPUSH + "\""
        buildConfigField "String", "SHELL_CODE_PUSH_KEY", "\"" + rootProject.ext.localRN.SHELL_REACT_NATIVE_CODEPUSH + "\""
        buildConfigField "String", "SHELL_RN_COMPONENT_NAME", "\"" + rootProject.ext.localRN.SHELL_RN_COMPONENT_NAME + "\""
        manifestPlaceholders = [
                'UMENG_APPKEY'        : rootProject.ext.app.UMENG_APPKEY,
                'UMENG_MESSAGE_SECRET': rootProject.ext.app.UMENG_MESSAGE_SECRET,
                'JPUSH_APPKEY'        : rootProject.ext.app.JPUSH_APPKEY,
                // set JPUSH_CHANNEL through walle
                'JPUSH_CHANNEL'       : ''
        ]
    }
    signingConfigs {
        release {
            storeFile file('../keystores/release.QAZ123456wsx789.jks')
            storePassword 'QAZ123456wsx789'
            keyAlias 'digital'
            keyPassword 'QAZ123456wsx789'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    lintOptions {
        abortOnError false
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile 'com.meituan.android.walle:library:1.1.5'
    compile 'com.ternence.framework:utils:1.0.4'
    compile 'io.paperdb:paperdb:2.1'
//    compile 'com.squareup.okhttp3:okhttp:3.9.0'

    compile project(':react-native-umeng-push')
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile project(':react-native-sound')
    compile project(':react-native-fetch-blob')
    compile project(':react-native-keychain')
    compile project(':react-native-fs')
    compile project(':react-native-shake-event')
    compile project(':react-native-device-info')
    compile project(':react-native-code-push')
    compile 'com.facebook.fresco:animated-webp:0.11.0'
    compile 'com.facebook.fresco:webpsupport:0.11.0'
    compile 'com.facebook.fresco:animated-gif:0.13.0'
    compile project(':PushSDK') //????
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile project(':jpush-react-native')
    compile project(':jcore-react-native')
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules

    compile group: 'org.jsoup', name: 'jsoup', version: '1.11.2'
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
